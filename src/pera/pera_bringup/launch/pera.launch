<launch>
   <!-- Make sure we are not using simulated time -->
   <param name="/use_sim_time" value="false" />
  
   <!-- Launch the driver in fake mode by default -->
   <arg name="sim" default="true" />
   
   <!-- Use motors on the arm -->
   <arg name="motors" default="true" />
   
   <!-- Load the URDF/Xacro model of our robot -->
   <param name="robot_description" command="$(find xacro)/xacro.py '$(find pera_description)/urdf/pera.xacro'" />
   
   <!-- Bring up the driver with a configuration file appropriate to the arm -->
   <node name="pera" pkg="pera_control" type="pera_driver_pospid" clear_params="true" output="screen">
      <rosparam file="$(find pera_bringup)/config/pera.yaml" command="load" />
      <param name="sim" value="$(arg sim)" />
      <param name="motors" value="$(arg motors)" />
   </node>
  
   <!-- Run a separate controller for the gripper (ook met de pera zo doen?? 
        Nee, we nemen het voorlopig mee met de rest van de controllers
   <node name="gripper_controller" pkg="pera_control" type="gripper_controller" output="screen">
      <rosparam>
         model: dualservo
         min_opening: -0.1
         max_opening: 0.9
#         joint: right_finger_joint
      </rosparam>
   </node>
-->

   <!-- Publish the robot state -->
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
       <param name="publish_frequency" type="double" value="20.0" />
   </node>
   
   <!-- Load diagnostics later-->


   <!-- <node pkg="rqt_robot_monitor" type="rqt_robot_monitor" name="rqt_robot_monitor" unless="$(arg sim)" /> -->
  
</launch>
